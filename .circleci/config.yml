version: 2.1
orbs:
  slack: circleci/slack@4.2.0
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      workflow_id:
        type: string   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-cloudfront
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
            aws s3 rb s3://udapeople-<< parameters.workflow_id >> --force  
            # exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string   
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl -H "token: ${MEMSTASH_TOKEN}" --request GET -L https://api.memstash.io/values/migrations-${CIRCLE_WORKFLOW_ID:0:7})
            if(( $SUCCESS==1 )); 
            then
              cd backend
              npm install
              npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend && npm install && npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          event: fail
          template: basic_fail_1

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend && npm install && npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          event: fail
          template: basic_fail_1

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Frontend test
          command:  |
            cd frontend && npm i && npm run test  
      - slack/notify:
          event: fail
          template: basic_fail_1
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: backend test
          command:  |
            cd backend && npm run test  
      - slack/notify:
          event: fail
          template: basic_fail_1
                
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Frontend analyze
          command:  |
            cd frontend
            npm audit fix --audit-level=critical --force
            # npm audit --audit-level=critical
      - slack/notify:
          event: fail
          template: basic_fail_1

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: backend analyze
          command:  |
            cd backend
            npm audit fix --audit-level=critical --force
            # npm audit --audit-level=critical 
      - slack/notify:
          event: fail
          template: basic_fail_1


  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command:  |
            yum update
            yum install -y gzip tar jq # jq is needed for slack/notify
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation wait stack-create-complete --stack-name  udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
              # exit 1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
              aws cloudformation wait stack-create-complete --stack-name  udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}  
              # exit 1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "[web]" > .circleci/ansible/inventory.txt
            BACKEND_DNS=$(aws ec2 describe-instances --region ${AWS_DEFAULT_REGION} --filters 'Name=tag:Name,Values=udapeople-backend*' --query "Reservations[*].Instances[0].PublicDnsName" --output text)
            echo $BACKEND_DNS
            while [[ -z $BACKEND_DNS ]] ; do
            BACKEND_DNS=$(aws ec2 describe-instances --region ${AWS_DEFAULT_REGION} --filters 'Name=tag:Name,Values=udapeople-backend*' --query "Reservations[*].Instances[0].PublicDnsName" --output text)
            sleep 10; echo "waiting backend dns" ;done
            echo $BACKEND_DNS
            echo $BACKEND_DNS >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            # exit 1
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}      
      - slack/notify:
          event: fail
          template: basic_fail_1

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["9c:77:e4:87:42:0a:8e:a6:b0:e6:94:0c:12:03:b5:19"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache curl
            apk add --no-cache --upgrade bash
            apk add --no-cache --update ansible
            apk add --no-cache openssh-client
            apk add --no-cache jq
            pip3 install awscli
      - run:
          name: Configure server
          no_output_timeout: 30m
          command: |
            export ANSIBLE_HOST_KEY_CHECKING=False
            cat .circleci/ansible/inventory.txt
            echo ENVIROMENT=development > "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity{.ts,.js} >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            cat backend/.env
            cd .circleci/ansible/
            ansible-playbook -i ./inventory.txt configure-server.yml
            #exit 1
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}      
      - slack/notify:
          event: fail
          template: basic_fail_1

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            # We need awscli to rollback the infrastructure if job failed
            # also jq is needed for slack/notify
            sudo apt update
            sudo apt install -y awscli jq

      - run:
          name: Run migrations
          command: |
            cd backend
            SUCCESS=0
            yes | npm run migrations > output || true
            RESULT=$(yes | cat output | grep "has been executed successfully" || true)
            if [ ! -z "$RESULT" ];then SUCCESS=1; fi 
            # exit 1
      - run:
          name: Send migration results to memstash
          command: |
            curl -H "Content-Type: text/plain" -H "token: ${MEMSTASH_TOKEN}" --request PUT --data ${SUCCESS} -L https://api.memstash.io/values/migrations-${CIRCLE_WORKFLOW_ID:0:7}
            # exit 1
     # Here's where you will add some code to rollback on failure
      - destroy-environment:      
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}      
      - slack/notify:
          event: fail
          template: basic_fail_1 

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs
            yum -y install tar gzip jq
            cd frontend
            npm install
      - run:
          name: Get backend url
          command: |
            BACKEND_DNS=$(aws ec2 describe-instances --region ${AWS_DEFAULT_REGION} --filters 'Name=tag:Name,Values=udapeople-backend*' --query "Reservations[*].Instances[0].PublicDnsName" --output text)
            export API_URL="http://${BACKEND_DNS}:3030"
            echo ENVIRONMENT=production > "frontend/.env"
            echo NODE_ENV=production >> "frontend/.env"
            echo API_URL=$API_URL >> "frontend/.env"
            echo "API_URL=$API_URL"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm run build
            aws s3 sync dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --acl public-read
      # Here's where you will add some code to rollback on failure      
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

              
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["9c:77:e4:87:42:0a:8e:a6:b0:e6:94:0c:12:03:b5:19"]
      # attach workspace
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible && apk add openssh # install the dependencies needed for your playbook
            apk add --update curl nodejs npm jq
            pip install awscli
      - run:
          name: Deploy backend
          command: |
            export ANSIBLE_HOST_KEY_CHECKING=False
            cd .circleci/ansible
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - slack/notify:
          event: fail
          template: basic_fail_1

  smoke-test:
    docker:
      # Lightweight Docker image
      - image: python:3.7-alpine3.11 
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm
            pip install awscli
      - run:
          name: Get backend dns
          command: |
            BACKEND_DNS=$(aws ec2 describe-instances --region ${AWS_DEFAULT_REGION} --filters 'Name=tag:Name,Values=udapeople-backend*' --query "Reservations[*].Instances[0].PublicDnsName" --output text)

      - run:
          name: Backend smoke test.
          command: |
            apistatus=$(yes | curl -s "http://${BACKEND_DNS}:3030/api/status" | grep -o "ok" || true)            
            if [$apistatus == "ok"]
            then
              return 1
            else
              return 0
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3.website.us-west-2.amazonaws.com"
            if curl -s ${URL} | grep "Welcome"
            then
              return 1
            else
              return 0
            fi
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # Used to revert migrations
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs
            yum -y install tar gzip jq # jq is for slack/notify
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file ".circleci/files/cloudfront.yml" \
              --stack-name udapeoplecf \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - slack/notify:
          event: fail
          template: basic_fail_1

  cleanup:
      docker:
        # Docker image here
        - image: amazon/aws-cli
      steps:
        # Checkout code from git
        - checkout
        - run:
            name: install dependencies
            command: |
              # your code here
              # install dependencies
              yum -y install jq
              echo ${CIRCLE_WORKFLOW_ID:0:7}
              # export OldWorkflowID="the id here"
              # export STACKS=[] #put the list of stacks here
        - run:
            name: Remove old stacks and files
            command: |
              echo $CIRCLE_WORKFLOW_ID
              # Get all stacks associated with UdaPeople project EXCEPT current Workflow then delete
              ## aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              ## --stack-status-filter CREATE_COMPLETE \
              ## --no-paginate --output json | jq .[] -r | grep udapeople-* | grep -v ${CIRCLE_WORKFLOW_ID:0:7} | xargs -I{} aws cloudformation delete-stack --stack-name {}
              ## echo "OK ___ Get all stacks"
              # Get all S3 buckets associated with UdaPeople project EXCEPT current Workflow then delete
              aws s3 ls | awk '{print $3}' | grep udapeople | grep -v ${CIRCLE_WORKFLOW_ID:0:7} | xargs -I{} aws s3 rb s3://{} --force

        - destroy-environment:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
        - revert-migrations:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
        - slack/notify:
            event: fail
            template: basic_fail_1
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
#           filters:
#             branches:
#               only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]